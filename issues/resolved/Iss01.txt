The examples currently show separate abstract and concrete classes for extensible matchers.
See:
    com.mistraltech.smog.examples.generics.matcher.AbstractBoxMatcher
    com.mistraltech.smog.examples.generics.matcher.BoxMatcher

Could these be combined into a single extensible BoxMatcher class?

This would involve moving the static factory methods from the subclass into the superclass:

    public static <P1> BoxMatcher<P1, BoxMatcher<P1, ?, Box<P1>>, Box<P1>> aBoxThat()
    {
        return aBoxLike(null);
    }

    public static <P1> BoxMatcher<P1, BoxMatcher<P1, ?, Box<P1>>, Box<P1>> aBoxLike(final Box<P1> template)
    {
        return new BoxMatcher<P1, BoxMatcher<P1, ?, Box<P1>>, Box<P1>>("a Box", template);
    }

The problem is that the implementation of matches safely requires this signature:

    protected void matchesSafely(T item, MatchAccumulator matchAccumulator) {
    }

Through type erasure, the runtime type of item is Object. Unfortunately, the type of item declared in this method
is used by PathAwareDiagnosingMatcher to enforce type checking when matching.

A solution would require an alternative mechanism for specifying or determining the type of T.

-----

This appears to be solved by creating a nested static class that is used as the type of the matcher for which
matchesSafely is overridden with an appropriate parameter type for item:

    private static class BoxMatcherType<P1> extends BoxMatcher<P1, BoxMatcherType<P1>, Box<P1>> {
        protected BoxMatcherType(String matchedObjectDescription, Box<P1> template) {
            super(matchedObjectDescription, template);
        }

        @Override
        protected void matchesSafely(Box<P1> item, MatchAccumulator matchAccumulator) {
            super.matchesSafely(item, matchAccumulator);
        }
    }

Type checking correctly identifies that the item should be of class Box.
This is demonstrated in test cases:
    GenericsMatcherExamplesTest.testBoxMatcherFailsForIncorrectInstanceType
    GenericsMatcherExamplesTest.testLabelledBoxMatcherFailsForIncorrectInstanceType